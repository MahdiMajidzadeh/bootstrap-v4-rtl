.rtl,
[dir="rtl"] {
  text-align: right;
  direction: rtl;

  .nav {
    padding-right: 0;
  }

  .navbar-nav .nav-item {
    float: right;
  }

  .navbar-nav .nav-item + .nav-item {
    margin-right: 1rem;
    margin-left: inherit;
  }

  th {
    text-align: right;
  }

  .alert-dismissible {
    padding-right: 1.25rem;
    padding-left: 4rem;
  }

  .dropdown-menu {
    right: 0;
    left: inherit;
    text-align: right;
  }

  .checkbox label {
    padding-right: 1.25rem;
    padding-left: inherit;
  }

  .btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .btn-group > .btn:last-child:not(:first-child),
  .btn-group > .dropdown-toggle:not(:first-child) {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .custom-control-label::after,
  .custom-control-label::before {
    right: -1.5rem;
    left: inherit;
  }

  .custom-select {
    padding: $custom-select-padding-y $custom-select-padding-x $custom-select-padding-y ($custom-select-padding-x + $custom-select-indicator-padding);
    background: $custom-select-bg $custom-select-indicator no-repeat left $custom-select-padding-x center;
    background-size: $custom-select-bg-size;
  }

  .input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
  .input-group > .input-group-append:last-child > .input-group-text:not(:last-child),
  .input-group > .input-group-append:not(:last-child) > .btn,
  .input-group > .input-group-append:not(:last-child) > .input-group-text,
  .input-group > .input-group-prepend > .btn,
  .input-group > .input-group-prepend > .input-group-text {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .input-group > .input-group-append > .btn,
  .input-group > .input-group-append > .input-group-text,
  .input-group > .input-group-prepend:first-child > .btn:not(:first-child),
  .input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child),
  .input-group > .input-group-prepend:not(:first-child) > .btn,
  .input-group > .input-group-prepend:not(:first-child) > .input-group-text {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .input-group > .custom-select:not(:first-child),
  .input-group > .form-control:not(:first-child) {
    border-radius: $border-radius 0 0 $border-radius;
  }

  .input-group > .custom-select:not(:last-child),
  .input-group > .form-control:not(:last-child) {
    border-radius: 0 $border-radius $border-radius 0;
  }

  .input-group > .custom-select:not(:last-child):not(:first-child),
  .input-group > .form-control:not(:last-child):not(:first-child) {
    border-radius: 0;
  }

  .custom-control {
    padding-right: 1.5rem;
    padding-left: inherit;
    margin-right: inherit;
    margin-left: 1rem;
  }

  .custom-control-indicator {
    right: 0;
    left: inherit;
  }

  .custom-file-label::after {
    right: initial;
    left: -1px;
    border-radius: .25rem 0 0 .25rem;
  }

  .radio input,
  .radio-inline,
  .checkbox input,
  .checkbox-inline input {
    margin-right: -1.25rem;
    margin-left: inherit;
  }

  @mixin form-validation-state($state, $color, $icon) {
    .#{$state}-feedback {
      display: none;
      width: 100%;
      margin-top: $form-feedback-margin-top;
      @include font-size($form-feedback-font-size);
      color: $color;
    }

    .#{$state}-tooltip {
      position: absolute;
      top: 100%;
      z-index: 5;
      display: none;
      max-width: 100%; // Contain to parent when possible
      padding: $form-feedback-tooltip-padding-y $form-feedback-tooltip-padding-x;
      margin-top: .1rem;
      @include font-size($form-feedback-tooltip-font-size);
      line-height: $form-feedback-tooltip-line-height;
      color: color-yiq($color);
      background-color: rgba($color, $form-feedback-tooltip-opacity);
      @include border-radius($form-feedback-tooltip-border-radius);
    }

    .form-control {
      .was-validated &:#{$state},
      &.is-#{$state} {
        border-color: $color;

        @if $enable-validation-icons {
          padding-right: $input-padding-x;
          padding-left: $input-height-inner;
          background-image: $icon;
          background-repeat: no-repeat;
          background-position: center left $input-height-inner-quarter;
          background-size: $input-height-inner-half $input-height-inner-half;
        }

        &:focus {
          border-color: $color;
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }

        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }
      }
    }

    // stylelint-disable-next-line selector-no-qualifying-type
    textarea.form-control {
      .was-validated &:#{$state},
      &.is-#{$state} {
        @if $enable-validation-icons {
          padding-right: $input-height-inner;
          background-position: top $input-height-inner-quarter right $input-height-inner-quarter;
        }
      }
    }

    .custom-select {
      .was-validated &:#{$state},
      &.is-#{$state} {
        border-color: $color;

        @if $enable-validation-icons {
          padding-right: $custom-select-feedback-icon-padding-right;
          background: $custom-select-background, $icon $custom-select-bg no-repeat $custom-select-feedback-icon-position / $custom-select-feedback-icon-size;
        }

        &:focus {
          border-color: $color;
          box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
        }

        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }
      }
    }


    .form-control-file {
      .was-validated &:#{$state},
      &.is-#{$state} {
        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }
      }
    }

    .form-check-input {
      .was-validated &:#{$state},
      &.is-#{$state} {
        ~ .form-check-label {
          color: $color;
        }

        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }
      }
    }

    .custom-control-input {
      .was-validated &:#{$state},
      &.is-#{$state} {
        ~ .custom-control-label {
          color: $color;

          &::before {
            border-color: $color;
          }
        }

        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }

        &:checked {
          ~ .custom-control-label::before {
            border-color: lighten($color, 10%);
            @include gradient-bg(lighten($color, 10%));
          }
        }

        &:focus {
          ~ .custom-control-label::before {
            box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
          }

          &:not(:checked) ~ .custom-control-label::before {
            border-color: $color;
          }
        }
      }
    }

    // custom file
    .custom-file-input {
      .was-validated &:#{$state},
      &.is-#{$state} {
        ~ .custom-file-label {
          border-color: $color;
        }

        ~ .#{$state}-feedback,
        ~ .#{$state}-tooltip {
          display: block;
        }

        &:focus {
          ~ .custom-file-label {
            border-color: $color;
            box-shadow: 0 0 0 $input-focus-width rgba($color, .25);
          }
        }
      }
    }
  }

  // Form validation
  //
  // Provide feedback to users when form field values are valid or invalid. Works
  // primarily for client-side validation via scoped `:invalid` and `:valid`
  // pseudo-classes but also includes `.is-invalid` and `.is-valid` classes for
  // server side validation.

  @each $state, $data in $form-validation-states {
    @include form-validation-state($state, map-get($data, color), map-get($data, icon));
  }

  .list-group {
    padding-right: 0;
    padding-left: 40px;
  }

  .close {
    float: left;
  }

  .modal-header .close {
    margin: -15px auto -15px -15px;
  }

  .modal-footer {
    > :not(:first-child) {
      margin-right: .25rem;
    }

    > :not(:last-child) {
      margin-left: .25rem;
    }

    > :first-child {
      margin-right: 0;
    }

    > :last-child {
      margin-left: 0;
    }
  }

  .alert-dismissible .close {
    right: inherit;
    left: 0;
  }

  .dropdown-toggle::after {
    margin-right: .255em;
    margin-left: 0;
  }

  .form-check-input {
    margin-right: -1.25rem;
    margin-left: inherit;
  }

  .form-check-label {
    padding-right: 1.25rem;
    padding-left: inherit;
  }

  .pagination,
  .list-unstyled,
  .list-inline {
    padding-right: 0;
    padding-left: inherit;
  }

  @mixin pagination-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
    .page-link {
      padding: $padding-y $padding-x;
      @include font-size($font-size);
      line-height: $line-height;
    }
    .page-item {
      &:first-child {
        .page-link {
          @include border-right-radius($border-radius);
        }
      }
      &:last-child {
        .page-link {
          @include border-left-radius($border-radius);
        }
      }
    }
  }

  .page-item {
    &:first-child {
      .page-link {
        @include border-right-radius($border-radius);
      }
    }

    &:last-child {
      .page-link {
        @include border-left-radius($border-radius);
      }
    }
  }

  .pagination-lg {
    @include pagination-size($pagination-padding-y-lg, $pagination-padding-x-lg, $font-size-lg, $line-height-lg, $border-radius-lg);
  }

  .pagination-sm {
    @include pagination-size($pagination-padding-y-sm, $pagination-padding-x-sm, $font-size-sm, $line-height-sm, $border-radius-sm);
  }

  @mixin make-col-offset($size, $columns: $grid-columns) {
    $num: $size / $columns;
    margin-right: if($num == 0, 0, percentage($num));
    margin-left: 0;
  }

  @mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) {
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
  @if $enable-grid-classes {
    @include make-grid-columns();
  }

  // stylelint-disable declaration-no-important
  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {

          .#{$abbrev}r#{$infix}-#{$size} {
            #{$prop}-right: 0 !important;
            #{$prop}-left: $length !important;
          }
          .#{$abbrev}l#{$infix}-#{$size} {
            #{$prop}-left: 0 !important;
            #{$prop}-right: $length !important;
          }
          #{$abbrev}x#{$infix}-#{$size} {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
          }
        }
      }

      .mr#{$infix}-auto {
        margin-right: 0 !important;
        margin-left: auto !important;
      }
      .ml#{$infix}-auto {
        margin-right: auto !important;
        margin-left: 0 !important;
      }
      .mx#{$infix}-auto {
        margin-right: auto !important;
        margin-left: auto !important;
      }
    }
  }

  @each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
      $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
      .text#{$infix}-right {
        text-align: left !important;
      }
      .text#{$infix}-left {
        text-align: right !important;
      }
    }
  }

  .breadcrumb-item {
    // The separator between breadcrumbs (by default, a forward-slash: "/")
    + .breadcrumb-item {
      padding-right: $breadcrumb-item-padding-x;
      padding-left: 0;

      &::before {
        padding-right: 0;
        padding-left: $breadcrumb-item-padding-x;
      }

      color: $breadcrumb-divider-color;
      content: $breadcrumb-divider;
    }
  }
}
